{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Wrapper/Wrapper.js","components/Footer/Footer.js","components/HeroCard/HeroCard.js","components/VictoryCard/VictoryCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","trueFalse","score","topScore","Jumbotron","React","Component","Wrapper","children","Footer","HeroCard","onClick","handleClick","id","alt","src","image","name","race","realm","VictoryCard","title","width","height","frameBorder","allowFullScreen","handleReset","App","state","heros","currentScore","clicked","winner","_this","indexOf","handleIncrement","setState","concat","newScore","console","log","handleShuffle","shuffledHeros","array","i","length","j","Math","floor","random","_ref","shuffleHeros","friends","_this2","this","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_Wrapper_Wrapper","components_VictoryCard_VictoryCard","components_Footer_Footer","map","hero","components_HeroCard_HeroCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e593caa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\n\nconst Navbar = props => (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light default fixed-top\">\n        <ul className=\"col-xs-4 navbar-nav mx-auto\">\n            <li className=\"navbar-brand\"><a  href=\"/clicky-game\">Lord of the Click</a></li>\n            <li className=\"navbar-brand\">{props.trueFalse}</li>\n            <li className=\"navbar-brand\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n        </nav>   \n)\n  \n\nexport default Navbar;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\n\nclass Jumbotron extends React.Component {\n    render() {\n      return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4 text-center\">One Click to Rule Them All!</h1>\n                <p className=\"lead text-center\">Choose your heros to destroy the one ring, but do not choose the same hero twice!</p>\n            </div>\n        </div>\n      )\n    }\n  }\n  \n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Footer.css\";\n\n\nclass Footer extends React.Component {\n    render() {\n      return (\n        <footer className=\"page-footer font-small blue\">\n            <div className=\"footer-copyright text-center py-3\">Â© 2018 Copyright</div>\n        </footer>\n      )\n    }\n  }\n  \n\nexport default Footer;","import React from \"react\";\nimport \"./HeroCard.css\";\n\nconst HeroCard = props => (\n  <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.id} src={props.image} />\n    </div>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Name:</strong> {props.name}\n        </li>\n        <li>\n          <strong>Race:</strong> {props.race}\n        </li>\n        <li>\n          <strong>Realm:</strong> {props.realm}\n        </li>\n      </ul>\n    </div>\n  </div>\n);\n\nexport default HeroCard;","import React from \"react\";\nimport \"./VictoryCard.css\"\n\n\nconst VictoryCard = (props) => {\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <iframe title=\"destruction of the one ring\" src=\"https://giphy.com/embed/iOkOpfXZZl44M\" width=\"700px\" height=\"700px\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 text-center\">\n                <button className=\"reset-btn\" onClick={props.handleReset}>New Game</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default VictoryCard;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Footer from \"./components/Footer/Footer\";\nimport HeroCard from \"./components/HeroCard/HeroCard\";\nimport VictoryCard from \"./components/VictoryCard/VictoryCard\";\nimport heros from \"./heros.json\";\nimport \"./App.css\";\n\nfunction shuffleHeros(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  state = {\n    heros,\n    currentScore: 0,\n    topScore: 0,\n    trueFalse: \"Click an image to begin!\",\n    clicked: [],\n    winner: false\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.setState({\n        trueFalse: \"Darn, this hero was already selected!\"\n      });\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    console.log(newScore);\n    this.setState({\n      currentScore: newScore,\n      trueFalse: \"Nice choice! Select another hero!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    \n    if (newScore >= 12) {\n      this.setState({ winner: true, trueFalse: \"My precious is no more!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      trueFalse: \"Click an image to begin!\",\n      clicked: [],\n      winner: false\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledHeros = shuffleHeros(heros);\n    this.setState({ friends: shuffledHeros });\n  };\n\n  render() {\n    return (\n      <div>\n    {this.state.winner ? (\n      <div>\n        <Navbar \n        score={this.state.currentScore}\n        topScore={this.state.topScore}\n        trueFalse={this.state.trueFalse}\n        />\n        <Jumbotron />\n        <Wrapper>\n          <VictoryCard handleReset={this.handleReset}/>\n          </Wrapper>\n        <Footer />\n        </div>\n    )\n    :\n    (\n      <div>\n        <Navbar \n        score={this.state.currentScore}\n        topScore={this.state.topScore}\n        trueFalse={this.state.trueFalse}\n        />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.heros.map(hero => ( \n            <HeroCard\n            handleClick={this.handleClick}\n            handleShuffle={this.handleShuffle}\n            handleReset={this.handleReset}\n            handleIncrement={this.handleIncrement}\n            id={hero.id}\n            key={hero.id}\n            name={hero.name}\n            image={hero.image}\n            race={hero.race}\n            realm={hero.realm}\n          />\n          ))}\n          </Wrapper>\n        <Footer />\n        </div>\n    )}\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}